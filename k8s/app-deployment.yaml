apiVersion: apps/v1           # API version
kind: Deployment              # Type of kubernetes resource
metadata:
  name: common-api    # Name of the kubernetes resource
  labels:                     # Labels that will be applied to this resource
    app: common-api
spec:
  replicas: 1                 # No. of replicas/pods to run in this deployment
  selector:
    matchLabels:              # The deployment applies to any pods mayching the specified labels
      app: common-api
  template:                   # Template for creating the pods in this deployment
    metadata:
      labels:                 # Labels that will be applied to each Pod in this deployment
        app: common-api
    spec:                     # Spec for the containers that will be run in the Pods
      imagePullSecrets:
        - name: testXxxxxsecret
      containers:
        - name: order-app-server
          image: XXXXXX/order:latest
          ports:
            - containerPort: 8080 # The port that the container exposes

          env:                  # Environment variables supplied to the Pod
            - name: SPRING_DATASOURCE_USERNAME # Name of the environment variable
              valueFrom:          # Get the value of environment variable from kubernetes secrets
                secretKeyRef:
                  name: mysql-user-pass
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-user-pass
                  key: password
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                secretKeyRef:
                  name: mysql-db-url
                  key: url
---
apiVersion: v1                # API version
kind: Service                 # Type of the kubernetes resource
metadata:
  name: order-app-server-service    # Name of the kubernetes resource
  labels:                     # Labels that will be applied to this resource
    app: order-app-server
spec:
  type: LoadBalancer              # The service will be exposed by opening a Port on each node and proxying it.
  selector:
    app: order-app-server   # The service exposes Pods with label `app=polling-app-server`
  ports:                      # Forward incoming connections on port 8080 to the target port 8080
    - name: http
      port: 8080
